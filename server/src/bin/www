#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../app");
const debug = require("debug")("game:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "80");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
//var WebSocketServer = require('websocket').server;
//wsServer = new WebSocketServer({
//    httpServer: server,
//    // You should not use autoAcceptConnections for production
//    // applications, as it defeats all standard cross-origin protection
//    // facilities built into the protocol and the browser.  You should
//    // *always* verify the connection's origin and decide whether or not
//    // to accept it.
//    autoAcceptConnections: false
//});
//
//function originIsAllowed(origin) {
//    // put logic here to detect whether the specified origin is allowed.
//    return true;
//}

//wsServer.on('request', function(request) {
//    if (!originIsAllowed(request.origin)) {
//        // Make sure we only accept requests from an allowed origin
//        request.reject();
//        console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
//        return;
//    }
//
//    var connection = request.accept('echo-protocol', request.origin);
//    console.log((new Date()) + ' Connection accepted.');
//    connection.on('message', function(message) {
//        if (message.type === 'utf8') {
//            console.log('Received Message: ' + message.utf8Data);
//            connection.sendUTF(message.utf8Data);
//        }
//        else if (message.type === 'binary') {
//            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
//            connection.sendBytes(message.binaryData);
//        }
//    });
//    connection.on('close', function(reasonCode, description) {
//        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
//    });
//});
let Server = require('socket.io');
const io = Server.listen(server, {path: "/multiplayer"});

//let GameServer = require("../GameServer");
io.on('connection', socket => {
    console.log(io);
    console.log(socket);

     console.log('a user connected');
     let game = games.find(game => game.hasPlayer(socket.id)) || games.find(game => !game.isFull());

     if (game) {
         console.log("game found");
         game.addPlayer(socket);
     } else {
         console.log("game created");
         game = new Game();
         game.addPlayer(socket);
         games.push(game);
     }

     socket.on('disconnect', function() {
         console.log(`user disconnected`);
         game.dropPlayer(socket);
     });

     socket.on('hello', function(playerInfo) {
         console.log(`user says hello`);
         game.updatePlayer(socket, playerInfo);
     });

     socket.on('PM', function(playerInfo) {
         console.log(`user says hello`);
         game.movePlayer(socket, playerInfo);
     });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
    debug("Listening on " + bind);
}
